package ItemDefinition

import ItemObjEditing
import HashList
import HashMap
import ObjectIdGenerator
import AbilityObjEditing
import StringUtils
import LinkedList
import ObjectIds

public enum ItemType
	COMMON
	UNCOMMON
	RARE
	EPIC
	LEGENDARY

public class BaseItemDefinition extends ItemDefinition
	LinkedList<int> abilities = new LinkedList<int>()
	IterableMap<string, string> props = new IterableMap<string, string>()
	ItemType itemType
	ItemDefinition recieptItem
	LinkedList<string> recieptItemRequires = new LinkedList<string>()
	string desc
	string name
	boolean isRecieptNeeded = true

	construct(int newId, int origId, ItemType itemType)
		super(newId, origId)
		this.itemType = itemType
		setDefaultProps()

	construct(int newId, ItemType itemType)
		super(newId, 'rst1')
		this.itemType = itemType
		setDefaultProps()

	protected function setDefaultProps()
		setDroppedWhenCarrierDies(true)
		setStockMaximum(1)
		setStockReplenishInterval(30)
		setStrengthBonus(0)

	function addProp(string name, string val)
		props.put(name, val)

	override function setName(string name)
		this.name = name
		super.setName(getColorOfCurrentType() + name + "|r")

	function setIcon(string name)
		string s = name
		if name.length() < 20 or not name.startsWith("ReplaceableTextures")
			 s = "ReplaceableTextures\\CommandButtons\\" + s
		if not name.endsWith(".blp")
			s += ".blp"
		setInterfaceIcon(s)

	protected function generateProps() returns string
		if props.size() == 0
			return ""
		let itemColor = getColorOfCurrentType()
		string tooltip = ""
		let iterator = props.iterator()
		for prop from iterator
			tooltip += itemColor + "+ " + props.get(prop) + "|r " + COLOR_GOLD.toColorString() + prop + "|r\n"
		return tooltip

	protected function getColorOfCurrentType() returns string
		switch itemType
			case COMMON
				return ""
			case UNCOMMON
				return color(31,191,0).toColorString()
			case RARE
				return color(60, 110, 255).toColorString()
			case EPIC
				return color(190, 0, 254).toColorString()
			case LEGENDARY
				return color(254,137,13).toColorString()
			default
				return ""
	
	override function setTooltipExtended(string desc)
		this.desc = desc
		super.setTooltipExtended(desc + "\n\n" + generateProps())
	
	function addAbility(int id)
		abilities.add(id)
		let result = abilities.joinBy((int i) -> i.toRawCode(), ",")
		setAbilities(result)

	protected function _makeReciept(int id, int goldCost, boolean isNeeded) returns ItemDefinition
		recieptItem = new ItemDefinition(id, 'rst1')
		recieptItem.setGoldCost(goldCost)
		isRecieptNeeded = isNeeded
		return recieptItem

	function makeReciept(int id, int goldCost) returns ItemDefinition
		return _makeReciept(id, goldCost, true)

	function makeReciept(int id, int goldCost, boolean isNeeded) returns ItemDefinition
		return _makeReciept(id, goldCost, isNeeded)

	function addRequiredItem(string name)
		recieptItemRequires.add(name)

	function finish()
		if recieptItem != null
			recieptItem.setName(getColorOfCurrentType() + "Reciept of " + name + "|r")
			let requiresItems = recieptItemRequires.joinBy((string name) -> "- " + name, "\n")
			recieptItem.setTooltipExtended(
				color(255, 100, 190).toColorString() +
				(isRecieptNeeded ? "This receipt is required" : "This receipt is not required") +
				"|r\n" +
				desc + "\n\n" +
				generateProps() + "\n" +
				 color(220, 50, 50).toColorString() +
				 "Requires items: \n" +
				 requiresItems + "|r"
			)

	function setStrengthBonus(int val)
		addProp("strength", val.toString())
		addAbility(
			new AbilityDefinitionStrengthBonusPlus1(ABIL_ID_GEN.next())
				..setStrengthBonus(1, val)
				.getNewId()
		)

	function setAttackBonus(int val)
		addProp("attack bonus", val.toString())
		addAbility(
			new AbilityDefinitionAttackBonus(ABIL_ID_GEN.next())
				..setAttackBonus(1, val)
				.getNewId()
		)

	function setLifeRegenerationIncrease(real val)
		addProp("life regeneration", val.toString() + "%")
		addAbility(
			new AbilityDefinitionDeathKnightUnholyAura(ABIL_ID_GEN.next())
				..setLifeRegenerationIncrease(1, val)
				..setMovementSpeedIncrease(1, 0)
				..setAreaofEffect(1, 1)
				..setArtTarget("")
				.getNewId()
		)

	function setAttackSpeedIncrease(real val)
		addProp("attack speed", (val * 100).toString() + "%")
		addAbility(
			new AbilityDefinitionAttackSpeedIncrease(ABIL_ID_GEN.next())
				..setAttackSpeedIncrease(1, val)
				.getNewId()
		)


// class RecieptDependencies
// 	HashList<int> items = new HashList<int>()

// 	function addAll(HashList<int> hashList)
// 		items.addAll(hashList)

// 	function addValue(int value)
// 		items.add(value)

// 	function setValues(vararg int values)
// 		for v in values
// 			items.add(v)

// 	function getValues() returns HashList<int>
// 		return items

// IterableMap<int, RecieptDependencies> reciepts = new IterableMap<int, RecieptDependencies>()

// init
// 	doInit()

// @compiletime function doInit()
// 	let iterator = reciepts.iterator()
// 	for reciept from iterator
// 		let r = new DefineItemReciept()..setResultItem(reciept)
// 		let itemsIterator = reciepts.get(reciept).getValues().iterator()
// 		for i from itemsIterator
// 			r.addRequiredItem(i)

		// let key = this.getNewId()
		// if (reciepts.has(key))
		// 	let exist = reciepts.get(key)
		// 	exist.addValue(id)
		// 	reciepts.put(key, exist)
		// else
		// 	let newOne = new RecieptDependencies()
		// 	newOne.addValue(id)
		// 	reciepts.put(key, newOne)