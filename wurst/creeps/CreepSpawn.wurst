package CreepSpawn

import BasePlayer
import Portal
import ClosureTimers
import ClosureEvents
import Orders
import HashMap
import HashList
import TerrainUtils

import Wave
import DropTables

import CreepHPUpgrade
import CreepDamageUpgrade
import CreepDefenceUpgrade

import TownHall

constant real SPAWN_PERIOD = 120

public class CreepSpawn
  protected IterableMap<int, Wave> levelsMap
  protected HashList<int> units
  protected player p
  protected angle zeroAngle = angle(0)
  int waveId = 0

  construct()
    let pl = new BasePlayer(11)
    p = pl.pl
    p.setState(PLAYER_STATE_GIVES_BOUNTY, 1)
    startLoopForSpawn()
    listenForDamageOfPortal()

  function setUnitsHashList(HashList<int> unitsHashList)
    units = unitsHashList
  
  function setLevelsMap(IterableMap<int, Wave> levelsIterableMap)
    levelsMap = levelsIterableMap

  static function getRandomLoc() returns vec2
    let locX = GetRandomReal(-5000, 5000)
    let locY = GetRandomReal(-5000, 5000)
    return vec2(locX, locY)

  function findForPathablePoint(vec2 pos, rect rec) returns vec2
    let p = rec.randomPoint()
    if checkForPathable(p) and p.distanceTo(pos) < 3000
      return findForPathablePoint(pos, rec)
    else
      return p

  function getRandomLocAroundPos(vec2 pos, real radius) returns vec2
    return findForPathablePoint(pos, pos.withRadiusRect(radius))

  private function isTerrainPathable(vec2 pos) returns boolean
    return pos.isTerrainPathable(PATHING_TYPE_WALKABILITY)

  function checkForPathable(vec2 loc) returns boolean
    let r = loc.withRadiusRect(400)
    return isTerrainPathable(r.getCenter())
      and isTerrainPathable(r.getLeftBot())
      and isTerrainPathable(r.getLeftTop())
      and isTerrainPathable(r.getRightBot())
      and isTerrainPathable(r.getRightTop())

  static function getRandomOffsetOfLoc(vec2 vec) returns vec2
    return vec.polarOffset(angle(GetRandomReal(0, 360)), GetRandomReal(50, 600))
  
  function makeUnit(int unitId, vec2 loc) returns unit
    return createUnit(p, unitId, loc, zeroAngle)

  function spawnPortals()
    for i = 0 to bj_MAX_PLAYER_SLOTS - 1
      let p = players[i]
      if p.isIngame()
        let loc = getRandomLocAroundPos(p.getStartLocation(), 10000)
        makeUnit(CREEP_PORTAL_ID, loc)

  function getNearestPlayerLocation(vec2 loc) returns vec2
    real minDistance = 999999
    vec2 nearest = vec2(0, 0)
    let allTowns = GetUnitsOfTypeIdAll(TOWN_HALL_ID)
    for town in allTowns
      let pos = town.getPos()
      let distance = pos.distanceTo(loc)
      if distance < minDistance
        minDistance = distance
        nearest = pos
    return nearest
  
  function upgradeUnits()
    let techLevel = (waveId / 2).toInt()
    SetPlayerTechResearched(p, CREEP_HP_UPGRADE_ID, techLevel)
    SetPlayerTechResearched(p, CREEP_DEFENCE_UPGRADE_ID, techLevel)
    SetPlayerTechResearched(p, CREEP_DAMAGE_UPGRADE_ID, techLevel)

  function startLoopForSpawn()
    doPeriodically(SPAWN_PERIOD) cb ->
      waveId++
      upgradeUnits()
      spawnPortals()
      spawnCreepsAtAllPortals()
      print("Wave " + color(228, 207, 16).toColorString() + waveId.toString() + "|r spawned.")

  function getCurrentWave() returns Wave
    return levelsMap.hasKey(waveId)
      ? levelsMap.get(waveId)
      : levelsMap.get(levelsMap.size())

  function spawnCreepsAtAllPortals()
    let portals = GetUnitsOfTypeIdAll(CREEP_PORTAL_ID)
    int i = 0
    for p in portals
      i += 1
      doAfter(i.toReal()) ->
        if p.isAlive()
          let pos = p.getPos()
          let spawned = spawnWaveAtLoc(pos)
          spawned.pointOrderById(Orders.attack, getNearestPlayerLocation(pos))
          commonDropTable.addSourceUnitGroup(spawned)

  function spawnWaveAtLoc(vec2 loc) returns group
    let wave = getCurrentWave()
    let waveUnits = wave.getAll()
    let creeps = CreateGroup()
    for u in waveUnits
      for i = 0 to waveUnits.get(u)
        creeps.addUnit(makeUnit(u, getRandomOffsetOfLoc(loc)))
    return creeps

  function spawnRandomUnitAtPos(vec2 pos)
    let unitId = units.get(GetRandomInt(0, units.size() - 1))
    createUnit(p, unitId, pos, zeroAngle)

  function listenForDamageOfPortal()
    EventListener.add(EVENT_UNIT_DAMAGED) () ->
      let tunit = GetTriggerUnit()
      if tunit.getTypeId() == CREEP_PORTAL_ID
        spawnRandomUnitAtPos(tunit.getPos())
